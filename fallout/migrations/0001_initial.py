# Generated by Django 2.1.4 on 2018-12-18 22:07

import common.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import fallout.models
import multiselectfield.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=100, verbose_name='surnom')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'joueur',
                'verbose_name_plural': 'joueurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='nom')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='titre')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='campaigns', verbose_name='image')),
                ('thumbnail', models.CharField(blank=True, max_length=100, verbose_name='miniature')),
                ('start_game_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date de début')),
                ('current_game_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date courante')),
                ('radiation', models.PositiveSmallIntegerField(default=0, verbose_name='rads par heure')),
                ('needs', models.BooleanField(default=True, verbose_name='besoins activés ?')),
            ],
            options={
                'verbose_name': 'campagne',
                'verbose_name_plural': 'campagnes',
            },
        ),
        migrations.CreateModel(
            name='CampaignEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name="date d'effet")),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name="date d'arrêt")),
                ('next_date', models.DateTimeField(blank=True, null=True, verbose_name='date suivante')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='active_effects', to='fallout.Campaign', verbose_name='campagne')),
            ],
            options={
                'verbose_name': 'effet de campagne',
                'verbose_name_plural': 'effets de campagne',
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('modification_date', models.DateTimeField(auto_now=True, verbose_name='date de modification')),
                ('strength', models.PositiveSmallIntegerField(default=5, verbose_name='force')),
                ('perception', models.PositiveSmallIntegerField(default=5, verbose_name='perception')),
                ('endurance', models.PositiveSmallIntegerField(default=5, verbose_name='endurance')),
                ('charisma', models.PositiveSmallIntegerField(default=5, verbose_name='charisme')),
                ('intelligence', models.PositiveSmallIntegerField(default=5, verbose_name='intelligence')),
                ('agility', models.PositiveSmallIntegerField(default=5, verbose_name='agilité')),
                ('luck', models.PositiveSmallIntegerField(default=5, verbose_name='chance')),
                ('max_health', models.PositiveSmallIntegerField(default=0, verbose_name='santé maximale')),
                ('max_action_points', models.PositiveSmallIntegerField(default=0, verbose_name="points d'action max.")),
                ('armor_class', models.SmallIntegerField(default=0, verbose_name='esquive')),
                ('carry_weight', models.SmallIntegerField(default=0, verbose_name='charge maximale')),
                ('melee_damage', models.SmallIntegerField(default=0, verbose_name='attaque en mélée')),
                ('sequence', models.SmallIntegerField(default=0, verbose_name='initiative')),
                ('healing_rate', models.SmallIntegerField(default=0, verbose_name='taux de regénération')),
                ('critical_chance', models.SmallIntegerField(default=0, verbose_name='chances de critiques')),
                ('damage_threshold', models.SmallIntegerField(default=0, verbose_name='absorption de dégâts')),
                ('damage_resistance', models.SmallIntegerField(default=0, verbose_name='résistance aux dégâts')),
                ('normal_resistance', models.SmallIntegerField(default=0, verbose_name='résistance physique')),
                ('laser_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au laser')),
                ('plasma_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au plasma')),
                ('explosive_resistance', models.SmallIntegerField(default=0, verbose_name='résistance aux explosions')),
                ('fire_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au feu')),
                ('gas_contact_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au gaz (contact)')),
                ('gas_inhaled_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au gaz (inhalé)')),
                ('electricity_resistance', models.SmallIntegerField(default=0, verbose_name="résistance à l'électricité")),
                ('poison_resistance', models.SmallIntegerField(default=0, verbose_name='résistance aux poisons')),
                ('radiation_resistance', models.SmallIntegerField(default=0, verbose_name='résistance aux radiations')),
                ('small_guns', models.SmallIntegerField(default=0, verbose_name='armes à feu légères')),
                ('big_guns', models.SmallIntegerField(default=0, verbose_name='armes à feu lourdes')),
                ('energy_weapons', models.SmallIntegerField(default=0, verbose_name='armes à énergie')),
                ('unarmed', models.SmallIntegerField(default=0, verbose_name='à mains nues')),
                ('melee_weapons', models.SmallIntegerField(default=0, verbose_name='armes de mélée')),
                ('throwing', models.SmallIntegerField(default=0, verbose_name='armes de lancer')),
                ('first_aid', models.SmallIntegerField(default=0, verbose_name='premiers secours')),
                ('doctor', models.SmallIntegerField(default=0, verbose_name='médecine')),
                ('chems', models.SmallIntegerField(default=0, verbose_name='chimie')),
                ('sneak', models.SmallIntegerField(default=0, verbose_name='discrétion')),
                ('lockpick', models.SmallIntegerField(default=0, verbose_name='crochetage')),
                ('steal', models.SmallIntegerField(default=0, verbose_name='pickpocket')),
                ('traps', models.SmallIntegerField(default=0, verbose_name='pièges')),
                ('explosives', models.SmallIntegerField(default=0, verbose_name='explosifs')),
                ('science', models.SmallIntegerField(default=0, verbose_name='science')),
                ('repair', models.SmallIntegerField(default=0, verbose_name='réparation')),
                ('speech', models.SmallIntegerField(default=0, verbose_name='discours')),
                ('barter', models.SmallIntegerField(default=0, verbose_name='marchandage')),
                ('survival', models.SmallIntegerField(default=0, verbose_name='survie')),
                ('knowledge', models.SmallIntegerField(default=0, verbose_name='connaissance')),
                ('hit_points_per_level', models.SmallIntegerField(default=0, verbose_name='santé par niveau')),
                ('skill_points_per_level', models.SmallIntegerField(default=0, verbose_name='compétences par niveau')),
                ('perk_rate', models.SmallIntegerField(default=0, verbose_name='niveaux pour un talent')),
                ('name', models.CharField(max_length=200, verbose_name='nom')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='titre')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='characters', verbose_name='image')),
                ('thumbnail', models.CharField(blank=True, max_length=100, verbose_name='miniature')),
                ('race', models.CharField(choices=[('human', 'humain'), ('ghoul', 'ghoule'), ('super_mutant', 'super-mutant'), ('deathclaw', 'écorcheur'), ('robot', 'robot'), ('animal', 'animal')], db_index=True, default='human', max_length=20, verbose_name='race')),
                ('level', models.PositiveSmallIntegerField(default=1, verbose_name='niveau')),
                ('is_player', models.BooleanField(db_index=True, default=False, verbose_name='joueur ?')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='actif ?')),
                ('is_resting', models.BooleanField(default=False, verbose_name='au repos ?')),
                ('health', models.PositiveSmallIntegerField(default=0, verbose_name='santé')),
                ('action_points', models.PositiveSmallIntegerField(default=0, verbose_name="points d'action")),
                ('skill_points', models.PositiveSmallIntegerField(default=0, verbose_name='points de compétence')),
                ('perk_points', models.PositiveSmallIntegerField(default=0, verbose_name='points de talent')),
                ('experience', models.PositiveIntegerField(default=0, verbose_name='expérience')),
                ('karma', models.SmallIntegerField(default=0, verbose_name='karma')),
                ('rads', models.FloatField(default=0.0, verbose_name='rads')),
                ('thirst', models.FloatField(default=0.0, verbose_name='soif')),
                ('hunger', models.FloatField(default=0.0, verbose_name='faim')),
                ('sleep', models.FloatField(default=0.0, verbose_name='sommeil')),
                ('regeneration', models.FloatField(default=0.0, verbose_name='regénération')),
                ('tag_skills', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('small_guns', 'armes à feu légères'), ('big_guns', 'armes à feu lourdes'), ('energy_weapons', 'armes à énergie'), ('unarmed', 'à mains nues'), ('melee_weapons', 'armes de mélée'), ('throwing', 'armes de lancer'), ('first_aid', 'premiers secours'), ('doctor', 'médecine'), ('chems', 'chimie'), ('sneak', 'discrétion'), ('lockpick', 'crochetage'), ('steal', 'pickpocket'), ('traps', 'pièges'), ('explosives', 'explosifs'), ('science', 'science'), ('repair', 'réparation'), ('speech', 'discours'), ('barter', 'marchandage'), ('survival', 'survie'), ('knowledge', 'connaissance')], max_length=200, verbose_name='spécialités')),
            ],
            options={
                'verbose_name': 'personnage',
                'verbose_name_plural': 'personnages',
            },
        ),
        migrations.CreateModel(
            name='CharacterEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name="date d'effet")),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name="date d'arrêt")),
                ('next_date', models.DateTimeField(blank=True, null=True, verbose_name='date suivante')),
            ],
            options={
                'verbose_name': 'effet de personnage',
                'verbose_name_plural': 'effets de personnage',
            },
        ),
        migrations.CreateModel(
            name='DamageHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('game_date', models.DateTimeField(blank=True, null=True, verbose_name='date en jeu')),
                ('damage_type', models.CharField(blank=True, choices=[('normal', 'dégâts normaux'), ('laser', 'dégâts de laser'), ('plasma', 'dégâts de plasma'), ('explosive', 'dégâts explosifs'), ('fire', 'dégâts de feu'), ('gas_contact', 'dégâts de gaz (contact)'), ('gas_inhaled', 'dégâts de gaz (inhalé)'), ('electricity', "dégâts d'électricité"), ('poison', 'dégâts de poison'), ('radiation', 'dégâts de radiations'), ('raw', 'dégâts directs'), ('heal', 'soins')], max_length=20, verbose_name='type de dégâts')),
                ('raw_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts bruts')),
                ('min_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts min.')),
                ('max_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts max.')),
                ('base_damage', models.SmallIntegerField(default=0, verbose_name='dégâts de base')),
                ('armor_threshold', models.FloatField(default=0.0, verbose_name='absorption armure')),
                ('armor_resistance', models.FloatField(default=0.0, verbose_name='résistance armure')),
                ('armor_damage', models.FloatField(default=0.0, verbose_name='dégats armure')),
                ('damage_threshold', models.FloatField(default=0.0, verbose_name='absorption dégâts')),
                ('damage_resistance', models.FloatField(default=0.0, verbose_name='résistance dégâts')),
                ('real_damage', models.SmallIntegerField(default=0, verbose_name='dégâts réels')),
            ],
            options={
                'verbose_name': 'historique de dégâts',
                'verbose_name_plural': 'historiques des dégâts',
            },
        ),
        migrations.CreateModel(
            name='Effect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('modification_date', models.DateTimeField(auto_now=True, verbose_name='date de modification')),
                ('name', models.CharField(max_length=200, verbose_name='nom')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='titre')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='effects', verbose_name='image')),
                ('thumbnail', models.CharField(blank=True, max_length=100, verbose_name='miniature')),
                ('chance', models.PositiveSmallIntegerField(default=100, verbose_name='chance')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='durée')),
                ('interval', models.DurationField(blank=True, null=True, verbose_name='intervalle')),
                ('damage_chance', models.PositiveSmallIntegerField(default=100, verbose_name='chance')),
                ('damage_type', models.CharField(blank=True, choices=[('normal', 'dégâts normaux'), ('laser', 'dégâts de laser'), ('plasma', 'dégâts de plasma'), ('explosive', 'dégâts explosifs'), ('fire', 'dégâts de feu'), ('gas_contact', 'dégâts de gaz (contact)'), ('gas_inhaled', 'dégâts de gaz (inhalé)'), ('electricity', "dégâts d'électricité"), ('poison', 'dégâts de poison'), ('radiation', 'dégâts de radiations'), ('raw', 'dégâts directs'), ('heal', 'soins')], max_length=20, verbose_name='type de dégâts')),
                ('raw_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts bruts')),
                ('min_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts min.')),
                ('max_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts max.')),
                ('current_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='dernier utilisateur')),
                ('next_effect', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Effect', verbose_name='effet suivant')),
            ],
            options={
                'verbose_name': 'effet',
                'verbose_name_plural': 'effets',
            },
            bases=(models.Model, fallout.models.DamageMixin),
        ),
        migrations.CreateModel(
            name='EffectModifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stats', models.CharField(choices=[('S.P.E.C.I.A.L.', (('strength', 'force'), ('perception', 'perception'), ('endurance', 'endurance'), ('charisma', 'charisme'), ('intelligence', 'intelligence'), ('agility', 'agilité'), ('luck', 'chance'))), ('Compétences', (('small_guns', 'armes à feu légères'), ('big_guns', 'armes à feu lourdes'), ('energy_weapons', 'armes à énergie'), ('unarmed', 'à mains nues'), ('melee_weapons', 'armes de mélée'), ('throwing', 'armes de lancer'), ('first_aid', 'premiers secours'), ('doctor', 'médecine'), ('chems', 'chimie'), ('sneak', 'discrétion'), ('lockpick', 'crochetage'), ('steal', 'pickpocket'), ('traps', 'pièges'), ('explosives', 'explosifs'), ('science', 'science'), ('repair', 'réparation'), ('speech', 'discours'), ('barter', 'marchandage'), ('survival', 'survie'), ('knowledge', 'connaissance'))), ('Statistiques secondaires', (('max_health', 'santé maximale'), ('max_action_points', "points d'action max."), ('carry_weight', 'charge maximale'), ('armor_class', 'esquive'), ('melee_damage', 'attaque en mélée'), ('sequence', 'initiative'), ('healing_rate', 'taux de regénération'), ('critical_chance', 'chance de critique'), ('damage_threshold', 'seuil de dégâts'), ('damage_resistance', 'résistance aux dégâts'))), ('Résistances', (('normal_resistance', 'résistance physique'), ('laser_resistance', 'résistance au laser'), ('plasma_resistance', 'résistance au plasma'), ('explosive_resistance', 'résistance aux explosions'), ('fire_resistance', 'résistance au feu'), ('gas_contact_resistance', 'résistance au gaz (contact)'), ('gas_inhaled_resistance', 'résistance au gaz (inhalé)'), ('electricity_resistance', "résistance à l'électricité"), ('poison_resistance', 'résistance aux poisons'), ('radiation_resistance', 'résistance aux radiations'))), ('Statistiques de niveau', (('hit_points_per_level', 'santé par niveau'), ('skill_points_per_level', 'compétences par niveau'), ('perk_rate', 'niveaux pour un talent'))), ('Etat général', (('health', 'santé'), ('action_points', "points d'action"), ('thirst', 'soif'), ('hunger', 'faim'), ('sleep', 'sommeil'), ('rads', 'rads'), ('experience', 'expérience'), ('skill_points', 'points de compétence'), ('perk_points', 'points de talent'), ('karma', 'karma')))], max_length=30, verbose_name='statistique')),
                ('value', models.SmallIntegerField(default=0, verbose_name='valeur')),
                ('effect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='fallout.Effect', verbose_name='effet')),
            ],
            options={
                'verbose_name': "modificateur d'effet",
                'verbose_name_plural': "modificateurs d'effets",
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(blank=True, choices=[('weapon', 'arme'), ('ammo', 'munition'), ('armor', 'armure'), ('helmet', 'casque'), ('grenade', 'grenade')], max_length=10, verbose_name='emplacement')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='quantité')),
                ('clip_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='munitions')),
                ('condition', models.FloatField(blank=True, null=True, verbose_name='état')),
            ],
            options={
                'verbose_name': 'équipement',
                'verbose_name_plural': 'équipements',
            },
        ),
        migrations.CreateModel(
            name='FightHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('game_date', models.DateTimeField(blank=True, null=True, verbose_name='date en jeu')),
                ('range', models.PositiveSmallIntegerField(default=0, verbose_name='distance')),
                ('body_part', models.CharField(choices=[('torso', 'torse'), ('legs', 'jambes'), ('arms', 'bras'), ('head', 'tête'), ('eyes', 'yeux')], max_length=10, verbose_name='partie du corps')),
                ('burst', models.BooleanField(default=False, verbose_name='tir en rafale ?')),
                ('hit_count', models.PositiveSmallIntegerField(default=0, verbose_name='compteur de coups')),
                ('hit_modifier', models.SmallIntegerField(default=0, verbose_name='modif. de précision')),
                ('hit_chance', models.SmallIntegerField(default=0, verbose_name='précision')),
                ('hit_roll', models.PositiveSmallIntegerField(default=0, verbose_name='jet de précision')),
                ('success', models.BooleanField(default=False, verbose_name='touché ?')),
                ('critical', models.BooleanField(default=False, verbose_name='critique ?')),
                ('status', models.CharField(blank=True, choices=[('hit_succeed', 'cible touchée'), ('hit_failed', 'cible manquée'), ('not_enough_ap', "points d'action insuffisants"), ('no_more_ammo', 'munitions insuffisantes'), ('target_dead', 'cible inconsciente'), ('target_killed', 'cible défaite'), ('weapon_broken', 'arme défectueuse')], max_length=20, verbose_name='status')),
            ],
            options={
                'verbose_name': 'historique de combat',
                'verbose_name_plural': 'historiques des combats',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('modification_date', models.DateTimeField(auto_now=True, verbose_name='date de modification')),
                ('name', models.CharField(max_length=200, verbose_name='nom')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='titre')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='items', verbose_name='image')),
                ('thumbnail', models.CharField(blank=True, max_length=100, verbose_name='miniature')),
                ('type', models.CharField(choices=[('weapon', 'arme'), ('ammo', 'munition'), ('armor', 'armure'), ('helmet', 'casque'), ('grenade', 'grenade'), ('food', 'nourriture'), ('chem', 'médicament'), ('misc', 'autre')], max_length=10, verbose_name='type')),
                ('value', models.PositiveIntegerField(default=0, verbose_name='valeur')),
                ('weight', models.FloatField(default=0.0, verbose_name='poids')),
                ('is_quest', models.BooleanField(default=False, verbose_name='quête ?')),
                ('is_melee', models.BooleanField(default=False, verbose_name='arme de mêlée ?')),
                ('is_throwable', models.BooleanField(default=False, verbose_name='jetable ?')),
                ('is_single_charge', models.BooleanField(default=False, verbose_name='recharge unitaire ?')),
                ('skill', models.CharField(blank=True, choices=[('small_guns', 'armes à feu légères'), ('big_guns', 'armes à feu lourdes'), ('energy_weapons', 'armes à énergie'), ('unarmed', 'à mains nues'), ('melee_weapons', 'armes de mélée'), ('throwing', 'armes de lancer'), ('first_aid', 'premiers secours'), ('doctor', 'médecine'), ('chems', 'chimie'), ('sneak', 'discrétion'), ('lockpick', 'crochetage'), ('steal', 'pickpocket'), ('traps', 'pièges'), ('explosives', 'explosifs'), ('science', 'science'), ('repair', 'réparation'), ('speech', 'discours'), ('barter', 'marchandage'), ('survival', 'survie'), ('knowledge', 'connaissance')], max_length=20, verbose_name='compétence')),
                ('min_strength', models.PositiveSmallIntegerField(default=0, verbose_name='force minimum')),
                ('clip_size', models.PositiveSmallIntegerField(default=0, verbose_name='taille du chargeur')),
                ('burst_count', models.PositiveSmallIntegerField(default=0, verbose_name='munitions en rafale')),
                ('range', models.PositiveSmallIntegerField(default=0, verbose_name='portée')),
                ('burst_range', models.PositiveIntegerField(default=0, verbose_name='portée en rafale')),
                ('hit_chance_modifier', models.SmallIntegerField(default=0, verbose_name='modif. de précision')),
                ('threshold_modifier', models.SmallIntegerField(default=0, verbose_name="modif. d'absorption")),
                ('threshold_rate_modifier', models.FloatField(default=0.0, verbose_name="modif. taux d'absorption")),
                ('resistance_modifier', models.FloatField(default=0.0, verbose_name='modif. de résistance')),
                ('ap_cost_reload', models.PositiveSmallIntegerField(default=0, verbose_name='coût PA recharge')),
                ('ap_cost_normal', models.PositiveSmallIntegerField(default=0, verbose_name='coût PA normal')),
                ('ap_cost_target', models.PositiveSmallIntegerField(default=0, verbose_name='coût PA ciblé')),
                ('ap_cost_burst', models.PositiveSmallIntegerField(default=0, verbose_name='coût PA rafale')),
                ('damage_type', models.CharField(blank=True, choices=[('normal', 'dégâts normaux'), ('laser', 'dégâts de laser'), ('plasma', 'dégâts de plasma'), ('explosive', 'dégâts explosifs'), ('fire', 'dégâts de feu'), ('gas_contact', 'dégâts de gaz (contact)'), ('gas_inhaled', 'dégâts de gaz (inhalé)'), ('electricity', "dégâts d'électricité"), ('poison', 'dégâts de poison'), ('radiation', 'dégâts de radiations'), ('raw', 'dégâts directs'), ('heal', 'soins')], max_length=20, verbose_name='type de dégâts')),
                ('raw_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts bruts')),
                ('min_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts mini.')),
                ('max_damage', models.PositiveSmallIntegerField(default=0, verbose_name='dégâts max.')),
                ('damage_modifier', models.FloatField(default=0.0, verbose_name='modif. de dégâts')),
                ('critical_modifier', models.FloatField(default=0.0, verbose_name='chances de critiques')),
                ('critical_damage', models.FloatField(default=0.0, verbose_name='dégâts critiques')),
                ('armor_class', models.SmallIntegerField(default=0, verbose_name='esquive')),
                ('condition_modifier', models.FloatField(default=0.0, verbose_name='modif. de condition')),
                ('normal_threshold', models.SmallIntegerField(default=0, verbose_name='absorption normal')),
                ('normal_resistance', models.FloatField(default=0.0, verbose_name='résistance normal')),
                ('laser_threshold', models.SmallIntegerField(default=0, verbose_name='absorption laser')),
                ('laser_resistance', models.FloatField(default=0.0, verbose_name='résistance laser')),
                ('plasma_threshold', models.SmallIntegerField(default=0, verbose_name='absorption plasma')),
                ('plasma_resistance', models.FloatField(default=0.0, verbose_name='résistance plasma')),
                ('explosive_threshold', models.SmallIntegerField(default=0, verbose_name='absorption explosifs')),
                ('explosive_resistance', models.FloatField(default=0.0, verbose_name='résistance explosifs')),
                ('fire_threshold', models.SmallIntegerField(default=0, verbose_name='absorption feu')),
                ('fire_resistance', models.FloatField(default=0.0, verbose_name='résistance feu')),
                ('ammunitions', models.ManyToManyField(blank=True, limit_choices_to={'type': 'ammo'}, related_name='weapons', to='fallout.Item', verbose_name='types de munitions')),
                ('current_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='dernier utilisateur')),
                ('effects', models.ManyToManyField(blank=True, related_name='_item_effects_+', to='fallout.Effect', verbose_name='effets')),
            ],
            options={
                'verbose_name': 'objet',
                'verbose_name_plural': 'objets',
            },
            bases=(models.Model, fallout.models.DamageMixin),
        ),
        migrations.CreateModel(
            name='ItemModifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stats', models.CharField(choices=[('S.P.E.C.I.A.L.', (('strength', 'force'), ('perception', 'perception'), ('endurance', 'endurance'), ('charisma', 'charisme'), ('intelligence', 'intelligence'), ('agility', 'agilité'), ('luck', 'chance'))), ('Compétences', (('small_guns', 'armes à feu légères'), ('big_guns', 'armes à feu lourdes'), ('energy_weapons', 'armes à énergie'), ('unarmed', 'à mains nues'), ('melee_weapons', 'armes de mélée'), ('throwing', 'armes de lancer'), ('first_aid', 'premiers secours'), ('doctor', 'médecine'), ('chems', 'chimie'), ('sneak', 'discrétion'), ('lockpick', 'crochetage'), ('steal', 'pickpocket'), ('traps', 'pièges'), ('explosives', 'explosifs'), ('science', 'science'), ('repair', 'réparation'), ('speech', 'discours'), ('barter', 'marchandage'), ('survival', 'survie'), ('knowledge', 'connaissance'))), ('Statistiques secondaires', (('max_health', 'santé maximale'), ('max_action_points', "points d'action max."), ('carry_weight', 'charge maximale'), ('armor_class', 'esquive'), ('melee_damage', 'attaque en mélée'), ('sequence', 'initiative'), ('healing_rate', 'taux de regénération'), ('critical_chance', 'chance de critique'), ('damage_threshold', 'seuil de dégâts'), ('damage_resistance', 'résistance aux dégâts'))), ('Résistances', (('normal_resistance', 'résistance physique'), ('laser_resistance', 'résistance au laser'), ('plasma_resistance', 'résistance au plasma'), ('explosive_resistance', 'résistance aux explosions'), ('fire_resistance', 'résistance au feu'), ('gas_contact_resistance', 'résistance au gaz (contact)'), ('gas_inhaled_resistance', 'résistance au gaz (inhalé)'), ('electricity_resistance', "résistance à l'électricité"), ('poison_resistance', 'résistance aux poisons'), ('radiation_resistance', 'résistance aux radiations'))), ('Statistiques de niveau', (('hit_points_per_level', 'santé par niveau'), ('skill_points_per_level', 'compétences par niveau'), ('perk_rate', 'niveaux pour un talent'))), ('Etat général', (('health', 'santé'), ('action_points', "points d'action"), ('thirst', 'soif'), ('hunger', 'faim'), ('sleep', 'sommeil'), ('rads', 'rads'), ('experience', 'expérience'), ('skill_points', 'points de compétence'), ('perk_points', 'points de talent'), ('karma', 'karma')))], max_length=30, verbose_name='statistique')),
                ('value', models.SmallIntegerField(default=0, verbose_name='valeur')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='fallout.Item', verbose_name='objet')),
            ],
            options={
                'verbose_name': "modificateur d'objet",
                'verbose_name_plural': "modificateurs d'objets",
            },
        ),
        migrations.CreateModel(
            name='Loot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='quantité')),
                ('condition', models.FloatField(blank=True, null=True, verbose_name='état')),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loots', to='fallout.Campaign', verbose_name='campagne')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loots', to='fallout.Item', verbose_name='objet')),
            ],
            options={
                'verbose_name': 'butin',
                'verbose_name_plural': 'butins',
            },
        ),
        migrations.CreateModel(
            name='LootTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='nom')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='titre')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='loots', verbose_name='image')),
                ('thumbnail', models.CharField(blank=True, max_length=100, verbose_name='miniature')),
            ],
            options={
                'verbose_name': 'modèle de butin',
                'verbose_name_plural': 'modèles des butins',
            },
        ),
        migrations.CreateModel(
            name='LootTemplateItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chance', models.PositiveSmallIntegerField(default=100, verbose_name='chance')),
                ('min_quantity', models.PositiveIntegerField(default=1, verbose_name='nombre min.')),
                ('max_quantity', models.PositiveIntegerField(default=1, null=True, verbose_name='nombre max.')),
                ('min_condition', models.FloatField(default=1.0, verbose_name='état min.')),
                ('max_condition', models.FloatField(default=1.0, verbose_name='état max.')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Item', verbose_name='objet')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='fallout.LootTemplate', verbose_name='modèle')),
            ],
            options={
                'verbose_name': 'objet de butin',
                'verbose_name_plural': 'objets des butins',
            },
        ),
        migrations.CreateModel(
            name='RollHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('game_date', models.DateTimeField(blank=True, null=True, verbose_name='date en jeu')),
                ('stats', models.CharField(blank=True, choices=[('S.P.E.C.I.A.L.', (('strength', 'force'), ('perception', 'perception'), ('endurance', 'endurance'), ('charisma', 'charisme'), ('intelligence', 'intelligence'), ('agility', 'agilité'), ('luck', 'chance'))), ('Compétences', (('small_guns', 'armes à feu légères'), ('big_guns', 'armes à feu lourdes'), ('energy_weapons', 'armes à énergie'), ('unarmed', 'à mains nues'), ('melee_weapons', 'armes de mélée'), ('throwing', 'armes de lancer'), ('first_aid', 'premiers secours'), ('doctor', 'médecine'), ('chems', 'chimie'), ('sneak', 'discrétion'), ('lockpick', 'crochetage'), ('steal', 'pickpocket'), ('traps', 'pièges'), ('explosives', 'explosifs'), ('science', 'science'), ('repair', 'réparation'), ('speech', 'discours'), ('barter', 'marchandage'), ('survival', 'survie'), ('knowledge', 'connaissance')))], max_length=20, verbose_name='statistique')),
                ('value', models.PositiveSmallIntegerField(default=0, verbose_name='valeur')),
                ('modifier', models.SmallIntegerField(default=0, verbose_name='modificateur')),
                ('roll', models.PositiveIntegerField(default=0, verbose_name='jet')),
                ('success', models.BooleanField(default=False, verbose_name='succès ?')),
                ('critical', models.BooleanField(default=False, verbose_name='critique ?')),
            ],
            options={
                'verbose_name': 'historique de jet',
                'verbose_name_plural': 'historiques des jets',
            },
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('strength', models.PositiveSmallIntegerField(default=5, verbose_name='force')),
                ('perception', models.PositiveSmallIntegerField(default=5, verbose_name='perception')),
                ('endurance', models.PositiveSmallIntegerField(default=5, verbose_name='endurance')),
                ('charisma', models.PositiveSmallIntegerField(default=5, verbose_name='charisme')),
                ('intelligence', models.PositiveSmallIntegerField(default=5, verbose_name='intelligence')),
                ('agility', models.PositiveSmallIntegerField(default=5, verbose_name='agilité')),
                ('luck', models.PositiveSmallIntegerField(default=5, verbose_name='chance')),
                ('max_health', models.PositiveSmallIntegerField(default=0, verbose_name='santé maximale')),
                ('max_action_points', models.PositiveSmallIntegerField(default=0, verbose_name="points d'action max.")),
                ('armor_class', models.SmallIntegerField(default=0, verbose_name='esquive')),
                ('carry_weight', models.SmallIntegerField(default=0, verbose_name='charge maximale')),
                ('melee_damage', models.SmallIntegerField(default=0, verbose_name='attaque en mélée')),
                ('sequence', models.SmallIntegerField(default=0, verbose_name='initiative')),
                ('healing_rate', models.SmallIntegerField(default=0, verbose_name='taux de regénération')),
                ('critical_chance', models.SmallIntegerField(default=0, verbose_name='chances de critiques')),
                ('damage_threshold', models.SmallIntegerField(default=0, verbose_name='absorption de dégâts')),
                ('damage_resistance', models.SmallIntegerField(default=0, verbose_name='résistance aux dégâts')),
                ('normal_resistance', models.SmallIntegerField(default=0, verbose_name='résistance physique')),
                ('laser_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au laser')),
                ('plasma_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au plasma')),
                ('explosive_resistance', models.SmallIntegerField(default=0, verbose_name='résistance aux explosions')),
                ('fire_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au feu')),
                ('gas_contact_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au gaz (contact)')),
                ('gas_inhaled_resistance', models.SmallIntegerField(default=0, verbose_name='résistance au gaz (inhalé)')),
                ('electricity_resistance', models.SmallIntegerField(default=0, verbose_name="résistance à l'électricité")),
                ('poison_resistance', models.SmallIntegerField(default=0, verbose_name='résistance aux poisons')),
                ('radiation_resistance', models.SmallIntegerField(default=0, verbose_name='résistance aux radiations')),
                ('small_guns', models.SmallIntegerField(default=0, verbose_name='armes à feu légères')),
                ('big_guns', models.SmallIntegerField(default=0, verbose_name='armes à feu lourdes')),
                ('energy_weapons', models.SmallIntegerField(default=0, verbose_name='armes à énergie')),
                ('unarmed', models.SmallIntegerField(default=0, verbose_name='à mains nues')),
                ('melee_weapons', models.SmallIntegerField(default=0, verbose_name='armes de mélée')),
                ('throwing', models.SmallIntegerField(default=0, verbose_name='armes de lancer')),
                ('first_aid', models.SmallIntegerField(default=0, verbose_name='premiers secours')),
                ('doctor', models.SmallIntegerField(default=0, verbose_name='médecine')),
                ('chems', models.SmallIntegerField(default=0, verbose_name='chimie')),
                ('sneak', models.SmallIntegerField(default=0, verbose_name='discrétion')),
                ('lockpick', models.SmallIntegerField(default=0, verbose_name='crochetage')),
                ('steal', models.SmallIntegerField(default=0, verbose_name='pickpocket')),
                ('traps', models.SmallIntegerField(default=0, verbose_name='pièges')),
                ('explosives', models.SmallIntegerField(default=0, verbose_name='explosifs')),
                ('science', models.SmallIntegerField(default=0, verbose_name='science')),
                ('repair', models.SmallIntegerField(default=0, verbose_name='réparation')),
                ('speech', models.SmallIntegerField(default=0, verbose_name='discours')),
                ('barter', models.SmallIntegerField(default=0, verbose_name='marchandage')),
                ('survival', models.SmallIntegerField(default=0, verbose_name='survie')),
                ('knowledge', models.SmallIntegerField(default=0, verbose_name='connaissance')),
                ('hit_points_per_level', models.SmallIntegerField(default=0, verbose_name='santé par niveau')),
                ('skill_points_per_level', models.SmallIntegerField(default=0, verbose_name='compétences par niveau')),
                ('perk_rate', models.SmallIntegerField(default=0, verbose_name='niveaux pour un talent')),
                ('character', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='statistics', serialize=False, to='fallout.Character', verbose_name='personnage')),
                ('charge', models.FloatField(default=0.0, verbose_name='charge')),
                ('modifiers', common.fields.JsonField(blank=True, null=True, verbose_name='modificateurs')),
                ('obsolete', models.BooleanField(default=False, editable=False, verbose_name='obsolète')),
                ('date', models.DateTimeField(auto_now=True, verbose_name='date')),
            ],
            options={
                'verbose_name': 'statistiques',
                'verbose_name_plural': 'statistiques',
            },
        ),
        migrations.AddField(
            model_name='rollhistory',
            name='character',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roll_history', to='fallout.Character', verbose_name='personnage'),
        ),
        migrations.AddField(
            model_name='fighthistory',
            name='attacker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Character', verbose_name='attaquant'),
        ),
        migrations.AddField(
            model_name='fighthistory',
            name='attacker_ammo',
            field=models.ForeignKey(blank=True, limit_choices_to={'type': 'ammo'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Item', verbose_name="munitions de l'attaquant"),
        ),
        migrations.AddField(
            model_name='fighthistory',
            name='attacker_weapon',
            field=models.ForeignKey(blank=True, limit_choices_to={'type__in': ('weapon', 'grenade')}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Item', verbose_name="arme de l'attaquant"),
        ),
        migrations.AddField(
            model_name='fighthistory',
            name='damage',
            field=models.OneToOneField(blank=True, limit_choices_to={'fight__isnull': False}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fight', to='fallout.DamageHistory', verbose_name='historique des dégâts'),
        ),
        migrations.AddField(
            model_name='fighthistory',
            name='defender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Character', verbose_name='défenseur'),
        ),
        migrations.AddField(
            model_name='fighthistory',
            name='defender_armor',
            field=models.ForeignKey(blank=True, limit_choices_to={'type__in': ('armor', 'helmet')}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Item', verbose_name='protection du défenseur'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='character',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipments', to='fallout.Character', verbose_name='personnage'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Item', verbose_name='objet'),
        ),
        migrations.AddField(
            model_name='damagehistory',
            name='armor',
            field=models.ForeignKey(blank=True, limit_choices_to={'type__in': ('armor', 'helmet')}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Item', verbose_name='protection'),
        ),
        migrations.AddField(
            model_name='damagehistory',
            name='character',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='damage_history', to='fallout.Character', verbose_name='personnage'),
        ),
        migrations.AddField(
            model_name='charactereffect',
            name='character',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='active_effects', to='fallout.Character', verbose_name='personnage'),
        ),
        migrations.AddField(
            model_name='charactereffect',
            name='effect',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Effect', verbose_name='effet'),
        ),
        migrations.AddField(
            model_name='character',
            name='campaign',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='characters', to='fallout.Campaign', verbose_name='campagne'),
        ),
        migrations.AddField(
            model_name='character',
            name='current_user',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='dernier utilisateur'),
        ),
        migrations.AddField(
            model_name='character',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='characters', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur'),
        ),
        migrations.AddField(
            model_name='campaigneffect',
            name='effect',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fallout.Effect', verbose_name='effet'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='current_character',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='fallout.Character', verbose_name='personnage actif'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='game_master',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='maître du jeu'),
        ),
    ]
