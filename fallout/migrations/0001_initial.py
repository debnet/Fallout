# Generated by Django 4.2.7 on 2023-11-13 21:20

import common.fields
import common.utils
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                (
                    "nickname",
                    models.CharField(blank=True, max_length=100, verbose_name="surnom"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "joueur",
                "verbose_name_plural": "joueurs",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Campaign",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="nom")),
                (
                    "name_fr",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "name_en",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=200, verbose_name="titre"),
                ),
                (
                    "title_fr",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "title_en",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "description_en",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="campaigns",
                        verbose_name="image",
                    ),
                ),
                (
                    "thumbnail",
                    models.CharField(blank=True, choices=[], max_length=100, verbose_name="miniature"),
                ),
                (
                    "start_game_date",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date de début"),
                ),
                (
                    "current_game_date",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date courante"),
                ),
                (
                    "radiation",
                    models.PositiveSmallIntegerField(default=0, verbose_name="rads par heure"),
                ),
                (
                    "needs",
                    models.BooleanField(default=True, verbose_name="besoins activés ?"),
                ),
                (
                    "view_pc",
                    models.BooleanField(default=False, verbose_name="voir les personnages joueurs"),
                ),
                (
                    "view_npc",
                    models.BooleanField(default=False, verbose_name="voir les personnages non-joueurs"),
                ),
                (
                    "view_rolls",
                    models.BooleanField(default=False, verbose_name="voir les jets lancés"),
                ),
            ],
            options={
                "verbose_name": "campagne",
                "verbose_name_plural": "campagnes",
            },
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "damage_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption de dégâts"),
                ),
                (
                    "damage_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance aux dégâts"),
                ),
                (
                    "normal_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption normal"),
                ),
                (
                    "normal_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance normal"),
                ),
                (
                    "laser_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption laser"),
                ),
                (
                    "laser_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance laser"),
                ),
                (
                    "plasma_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption plasma"),
                ),
                (
                    "plasma_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance plasma"),
                ),
                (
                    "explosive_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption explosifs"),
                ),
                (
                    "explosive_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance explosifs"),
                ),
                (
                    "fire_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption feu"),
                ),
                (
                    "fire_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance feu"),
                ),
                (
                    "electricity_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption électricité"),
                ),
                (
                    "electricity_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance électricité"),
                ),
                (
                    "poison_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption poison"),
                ),
                (
                    "poison_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance poison"),
                ),
                (
                    "radiation_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption radiations"),
                ),
                (
                    "radiation_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance radiations"),
                ),
                (
                    "gas_contact_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption gaz (contact)"),
                ),
                (
                    "gas_contact_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance gaz (contact)"),
                ),
                (
                    "gas_inhaled_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption gaz (inhalé)"),
                ),
                (
                    "gas_inhaled_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance gaz (inhalé)"),
                ),
                (
                    "strength",
                    models.PositiveSmallIntegerField(default=5, verbose_name="force"),
                ),
                (
                    "perception",
                    models.PositiveSmallIntegerField(default=5, verbose_name="perception"),
                ),
                (
                    "endurance",
                    models.PositiveSmallIntegerField(default=5, verbose_name="endurance"),
                ),
                (
                    "charisma",
                    models.PositiveSmallIntegerField(default=5, verbose_name="charisme"),
                ),
                (
                    "intelligence",
                    models.PositiveSmallIntegerField(default=5, verbose_name="intelligence"),
                ),
                (
                    "agility",
                    models.PositiveSmallIntegerField(default=5, verbose_name="agilité"),
                ),
                (
                    "luck",
                    models.PositiveSmallIntegerField(default=5, verbose_name="chance"),
                ),
                (
                    "max_health",
                    models.PositiveSmallIntegerField(default=0, verbose_name="santé maximale"),
                ),
                (
                    "max_action_points",
                    models.PositiveSmallIntegerField(default=0, verbose_name="points d'action max."),
                ),
                (
                    "armor_class",
                    models.SmallIntegerField(default=0, verbose_name="classe d'armure"),
                ),
                (
                    "carry_weight",
                    models.SmallIntegerField(default=0, verbose_name="charge maximale"),
                ),
                (
                    "melee_damage",
                    models.SmallIntegerField(default=0, verbose_name="dégâts en mêlée"),
                ),
                (
                    "sequence",
                    models.SmallIntegerField(default=0, verbose_name="initiative"),
                ),
                (
                    "healing_rate",
                    models.SmallIntegerField(default=0, verbose_name="taux de regénération"),
                ),
                (
                    "ap_cost_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur d'action"),
                ),
                (
                    "one_hand_accuracy",
                    models.SmallIntegerField(default=0, verbose_name="précision à une main"),
                ),
                (
                    "two_hands_accuracy",
                    models.SmallIntegerField(default=0, verbose_name="précision à deux mains"),
                ),
                (
                    "damage_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur de dégâts"),
                ),
                (
                    "critical_chance",
                    models.SmallIntegerField(default=0, verbose_name="chances de critiques"),
                ),
                (
                    "critical_raw_chance",
                    models.SmallIntegerField(default=0, verbose_name="chances de dégâts bruts"),
                ),
                (
                    "critical_damage",
                    models.SmallIntegerField(default=0, verbose_name="modificateur dégâts critiques"),
                ),
                (
                    "small_guns",
                    models.SmallIntegerField(default=0, verbose_name="armes à feu légères"),
                ),
                (
                    "big_guns",
                    models.SmallIntegerField(default=0, verbose_name="armes à feu lourdes"),
                ),
                (
                    "energy_weapons",
                    models.SmallIntegerField(default=0, verbose_name="armes à énergie"),
                ),
                (
                    "unarmed",
                    models.SmallIntegerField(default=0, verbose_name="à mains nues"),
                ),
                (
                    "melee_weapons",
                    models.SmallIntegerField(default=0, verbose_name="armes de mêlée"),
                ),
                (
                    "throwing",
                    models.SmallIntegerField(default=0, verbose_name="armes de lancer"),
                ),
                (
                    "athletics",
                    models.SmallIntegerField(default=0, verbose_name="athlétisme"),
                ),
                (
                    "detection",
                    models.SmallIntegerField(default=0, verbose_name="détection"),
                ),
                (
                    "first_aid",
                    models.SmallIntegerField(default=0, verbose_name="premiers secours"),
                ),
                (
                    "doctor",
                    models.SmallIntegerField(default=0, verbose_name="médecine"),
                ),
                (
                    "chems",
                    models.SmallIntegerField(default=0, verbose_name="pharmacologie"),
                ),
                (
                    "sneak",
                    models.SmallIntegerField(default=0, verbose_name="discrétion"),
                ),
                (
                    "lockpick",
                    models.SmallIntegerField(default=0, verbose_name="crochetage"),
                ),
                (
                    "steal",
                    models.SmallIntegerField(default=0, verbose_name="pickpocket"),
                ),
                ("traps", models.SmallIntegerField(default=0, verbose_name="pièges")),
                (
                    "explosives",
                    models.SmallIntegerField(default=0, verbose_name="explosifs"),
                ),
                (
                    "science",
                    models.SmallIntegerField(default=0, verbose_name="science"),
                ),
                (
                    "repair",
                    models.SmallIntegerField(default=0, verbose_name="mécanique"),
                ),
                (
                    "computers",
                    models.SmallIntegerField(default=0, verbose_name="informatique"),
                ),
                (
                    "electronics",
                    models.SmallIntegerField(default=0, verbose_name="électronique"),
                ),
                (
                    "speech",
                    models.SmallIntegerField(default=0, verbose_name="persuasion"),
                ),
                (
                    "deception",
                    models.SmallIntegerField(default=0, verbose_name="tromperie"),
                ),
                (
                    "barter",
                    models.SmallIntegerField(default=0, verbose_name="marchandage"),
                ),
                (
                    "survival",
                    models.SmallIntegerField(default=0, verbose_name="survie"),
                ),
                (
                    "knowledge",
                    models.SmallIntegerField(default=0, verbose_name="connaissance"),
                ),
                (
                    "hit_points_per_level",
                    models.SmallIntegerField(default=0, verbose_name="santé par niveau"),
                ),
                (
                    "skill_points_per_level",
                    models.SmallIntegerField(default=0, verbose_name="compétences par niveau"),
                ),
                (
                    "perk_rate",
                    models.SmallIntegerField(default=0, verbose_name="niveaux pour un talent"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="nom")),
                (
                    "name_fr",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "name_en",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=200, verbose_name="titre"),
                ),
                (
                    "title_fr",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "title_en",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "description_en",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                ("background", models.TextField(blank=True, verbose_name="contexte")),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="characters",
                        verbose_name="image",
                    ),
                ),
                (
                    "thumbnail",
                    models.CharField(blank=True, choices=[], max_length=100, verbose_name="miniature"),
                ),
                (
                    "race",
                    models.CharField(
                        choices=[
                            ("human", "humain"),
                            ("ghoul", "ghoule"),
                            ("super_mutant", "super-mutant"),
                            ("deathclaw", "écorcheur"),
                            ("robot", "robot"),
                            ("animal", "animal"),
                            ("creature", "créature"),
                        ],
                        db_index=True,
                        default="human",
                        max_length=20,
                        verbose_name="race",
                    ),
                ),
                (
                    "level",
                    models.PositiveSmallIntegerField(default=1, verbose_name="niveau"),
                ),
                (
                    "is_active",
                    models.BooleanField(db_index=True, default=True, verbose_name="actif ?"),
                ),
                (
                    "is_player",
                    models.BooleanField(db_index=True, default=False, verbose_name="joueur ?"),
                ),
                (
                    "is_resting",
                    models.BooleanField(default=False, verbose_name="au repos ?"),
                ),
                (
                    "has_stats",
                    models.BooleanField(default=True, verbose_name="stats calculées ?"),
                ),
                (
                    "has_needs",
                    models.BooleanField(default=True, verbose_name="besoins activés ?"),
                ),
                (
                    "health",
                    models.PositiveSmallIntegerField(default=0, verbose_name="santé"),
                ),
                (
                    "action_points",
                    models.PositiveSmallIntegerField(default=0, verbose_name="points d'action"),
                ),
                (
                    "skill_points",
                    models.PositiveSmallIntegerField(default=0, verbose_name="points de compétence"),
                ),
                (
                    "perk_points",
                    models.PositiveSmallIntegerField(default=0, verbose_name="points de talent"),
                ),
                (
                    "experience",
                    models.PositiveIntegerField(default=0, verbose_name="expérience"),
                ),
                ("karma", models.SmallIntegerField(default=0, verbose_name="karma")),
                (
                    "money",
                    models.PositiveIntegerField(default=0, verbose_name="argent"),
                ),
                (
                    "reward",
                    models.PositiveSmallIntegerField(default=0, verbose_name="récompense"),
                ),
                (
                    "loot_on_death",
                    models.BooleanField(default=True, verbose_name="butin au décès ?"),
                ),
                ("rads", models.FloatField(default=0.0, verbose_name="rads")),
                ("thirst", models.FloatField(default=0.0, verbose_name="soif")),
                ("hunger", models.FloatField(default=0.0, verbose_name="faim")),
                ("sleep", models.FloatField(default=0.0, verbose_name="sommeil")),
                (
                    "regeneration",
                    models.FloatField(default=0.0, verbose_name="regénération"),
                ),
                (
                    "tag_skills",
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            ("small_guns", "armes à feu légères"),
                            ("big_guns", "armes à feu lourdes"),
                            ("energy_weapons", "armes à énergie"),
                            ("unarmed", "à mains nues"),
                            ("melee_weapons", "armes de mêlée"),
                            ("throwing", "armes de lancer"),
                            ("athletics", "athlétisme"),
                            ("detection", "détection"),
                            ("first_aid", "premiers secours"),
                            ("doctor", "médecine"),
                            ("chems", "pharmacologie"),
                            ("sneak", "discrétion"),
                            ("lockpick", "crochetage"),
                            ("steal", "pickpocket"),
                            ("traps", "pièges"),
                            ("explosives", "explosifs"),
                            ("science", "science"),
                            ("repair", "mécanique"),
                            ("computers", "informatique"),
                            ("electronics", "électronique"),
                            ("speech", "persuasion"),
                            ("deception", "tromperie"),
                            ("barter", "marchandage"),
                            ("survival", "survie"),
                            ("knowledge", "connaissance"),
                        ],
                        max_length=300,
                        verbose_name="spécialités",
                    ),
                ),
                (
                    "extra_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="données complémentaires",
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="characters",
                        to="fallout.campaign",
                        verbose_name="campagne",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="characters",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="joueur",
                    ),
                ),
            ],
            options={
                "verbose_name": "personnage",
                "verbose_name_plural": "personnages",
            },
        ),
        migrations.CreateModel(
            name="DamageHistory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "damage_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "dégâts",
                                (
                                    ("normal", "dégâts normaux"),
                                    ("laser", "dégâts de laser"),
                                    ("plasma", "dégâts de plasma"),
                                    ("explosive", "dégâts explosifs"),
                                    ("fire", "dégâts de feu"),
                                    ("electricity", "dégâts d'électricité"),
                                    ("poison", "dégâts de poison"),
                                    ("radiation", "dégâts de radiations"),
                                    ("gas_contact", "dégâts de gaz (contact)"),
                                    ("gas_inhaled", "dégâts de gaz (inhalé)"),
                                    ("raw", "dégâts directs"),
                                    ("thirst", "augmentation de la soif"),
                                    ("hunger", "augmentation de la faim"),
                                    ("sleep", "augmentation du sommeil"),
                                ),
                            ),
                            (
                                "soins",
                                (
                                    ("heal", "soins de santé"),
                                    ("heal_rad", "soins de radiations"),
                                    ("heal_thirst", "diminution de la soif"),
                                    ("heal_hunger", "diminution de la faim"),
                                    ("heal_sleep", "diminution du sommeil"),
                                ),
                            ),
                            (
                                "argent",
                                (
                                    ("add_money", "gain d'argent"),
                                    ("remove_money", "perte d'argent"),
                                ),
                            ),
                        ],
                        max_length=20,
                        verbose_name="type de dégâts",
                    ),
                ),
                (
                    "min_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts min."),
                ),
                (
                    "max_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts max."),
                ),
                (
                    "raw_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts bruts"),
                ),
                (
                    "body_part",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("torso", "torse"),
                            ("legs", "jambes"),
                            ("arms", "bras"),
                            ("head", "tête"),
                            ("eyes", "yeux"),
                        ],
                        max_length=10,
                        verbose_name="partie du corps",
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True, verbose_name="date")),
                (
                    "game_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date en jeu"),
                ),
                ("level", models.SmallIntegerField(default=0, verbose_name="niveau")),
                (
                    "base_damage",
                    models.SmallIntegerField(default=0, verbose_name="dégâts de base"),
                ),
                (
                    "armor_threshold",
                    models.FloatField(default=0.0, verbose_name="absorption armure"),
                ),
                (
                    "armor_resistance",
                    models.FloatField(default=0.0, verbose_name="résistance armure"),
                ),
                (
                    "armor_damage",
                    models.FloatField(default=0.0, verbose_name="dégâts armure"),
                ),
                (
                    "damage_threshold",
                    models.FloatField(default=0.0, verbose_name="absorption dégâts"),
                ),
                (
                    "damage_resistance",
                    models.FloatField(default=0.0, verbose_name="résistance dégâts"),
                ),
                (
                    "real_damage",
                    models.SmallIntegerField(default=0, verbose_name="dégâts réels"),
                ),
                (
                    "damage_rate",
                    models.FloatField(default=0.0, verbose_name="taux de dégâts"),
                ),
                (
                    "source",
                    models.CharField(blank=True, max_length=200, verbose_name="source"),
                ),
            ],
            options={
                "verbose_name": "historique de dégâts",
                "verbose_name_plural": "historiques des dégâts",
            },
        ),
        migrations.CreateModel(
            name="Effect",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "damage_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "dégâts",
                                (
                                    ("normal", "dégâts normaux"),
                                    ("laser", "dégâts de laser"),
                                    ("plasma", "dégâts de plasma"),
                                    ("explosive", "dégâts explosifs"),
                                    ("fire", "dégâts de feu"),
                                    ("electricity", "dégâts d'électricité"),
                                    ("poison", "dégâts de poison"),
                                    ("radiation", "dégâts de radiations"),
                                    ("gas_contact", "dégâts de gaz (contact)"),
                                    ("gas_inhaled", "dégâts de gaz (inhalé)"),
                                    ("raw", "dégâts directs"),
                                    ("thirst", "augmentation de la soif"),
                                    ("hunger", "augmentation de la faim"),
                                    ("sleep", "augmentation du sommeil"),
                                ),
                            ),
                            (
                                "soins",
                                (
                                    ("heal", "soins de santé"),
                                    ("heal_rad", "soins de radiations"),
                                    ("heal_thirst", "diminution de la soif"),
                                    ("heal_hunger", "diminution de la faim"),
                                    ("heal_sleep", "diminution du sommeil"),
                                ),
                            ),
                            (
                                "argent",
                                (
                                    ("add_money", "gain d'argent"),
                                    ("remove_money", "perte d'argent"),
                                ),
                            ),
                        ],
                        max_length=20,
                        verbose_name="type de dégâts",
                    ),
                ),
                (
                    "min_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts min."),
                ),
                (
                    "max_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts max."),
                ),
                (
                    "raw_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts bruts"),
                ),
                (
                    "body_part",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("torso", "torse"),
                            ("legs", "jambes"),
                            ("arms", "bras"),
                            ("head", "tête"),
                            ("eyes", "yeux"),
                        ],
                        max_length=10,
                        verbose_name="partie du corps",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="nom")),
                (
                    "name_fr",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "name_en",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=200, verbose_name="titre"),
                ),
                (
                    "title_fr",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "title_en",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "description_en",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="effects", verbose_name="image"),
                ),
                (
                    "thumbnail",
                    models.CharField(blank=True, choices=[], max_length=100, verbose_name="miniature"),
                ),
                (
                    "chance",
                    models.PositiveSmallIntegerField(default=100, verbose_name="chance d'effet"),
                ),
                (
                    "duration",
                    models.DurationField(blank=True, null=True, verbose_name="durée d'effet"),
                ),
                (
                    "apply",
                    models.BooleanField(default=True, verbose_name="appliquer ?"),
                ),
                (
                    "interval",
                    models.DurationField(blank=True, null=True, verbose_name="intervalle"),
                ),
                (
                    "damage_chance",
                    models.PositiveSmallIntegerField(default=100, verbose_name="chance de dégâts"),
                ),
                (
                    "cancel_effect",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="fallout.effect",
                        verbose_name="effet annulé",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="perks",
                        to="fallout.character",
                        verbose_name="personnage",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "next_effect",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="fallout.effect",
                        verbose_name="effet suivant",
                    ),
                ),
            ],
            options={
                "verbose_name": "effet",
                "verbose_name_plural": "effets",
            },
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "damage_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption de dégâts"),
                ),
                (
                    "damage_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance aux dégâts"),
                ),
                (
                    "normal_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption normal"),
                ),
                (
                    "normal_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance normal"),
                ),
                (
                    "laser_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption laser"),
                ),
                (
                    "laser_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance laser"),
                ),
                (
                    "plasma_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption plasma"),
                ),
                (
                    "plasma_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance plasma"),
                ),
                (
                    "explosive_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption explosifs"),
                ),
                (
                    "explosive_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance explosifs"),
                ),
                (
                    "fire_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption feu"),
                ),
                (
                    "fire_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance feu"),
                ),
                (
                    "electricity_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption électricité"),
                ),
                (
                    "electricity_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance électricité"),
                ),
                (
                    "poison_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption poison"),
                ),
                (
                    "poison_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance poison"),
                ),
                (
                    "radiation_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption radiations"),
                ),
                (
                    "radiation_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance radiations"),
                ),
                (
                    "gas_contact_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption gaz (contact)"),
                ),
                (
                    "gas_contact_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance gaz (contact)"),
                ),
                (
                    "gas_inhaled_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption gaz (inhalé)"),
                ),
                (
                    "gas_inhaled_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance gaz (inhalé)"),
                ),
                (
                    "damage_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "dégâts",
                                (
                                    ("normal", "dégâts normaux"),
                                    ("laser", "dégâts de laser"),
                                    ("plasma", "dégâts de plasma"),
                                    ("explosive", "dégâts explosifs"),
                                    ("fire", "dégâts de feu"),
                                    ("electricity", "dégâts d'électricité"),
                                    ("poison", "dégâts de poison"),
                                    ("radiation", "dégâts de radiations"),
                                    ("gas_contact", "dégâts de gaz (contact)"),
                                    ("gas_inhaled", "dégâts de gaz (inhalé)"),
                                    ("raw", "dégâts directs"),
                                    ("thirst", "augmentation de la soif"),
                                    ("hunger", "augmentation de la faim"),
                                    ("sleep", "augmentation du sommeil"),
                                ),
                            ),
                            (
                                "soins",
                                (
                                    ("heal", "soins de santé"),
                                    ("heal_rad", "soins de radiations"),
                                    ("heal_thirst", "diminution de la soif"),
                                    ("heal_hunger", "diminution de la faim"),
                                    ("heal_sleep", "diminution du sommeil"),
                                ),
                            ),
                            (
                                "argent",
                                (
                                    ("add_money", "gain d'argent"),
                                    ("remove_money", "perte d'argent"),
                                ),
                            ),
                        ],
                        max_length=20,
                        verbose_name="type de dégâts",
                    ),
                ),
                (
                    "min_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts min."),
                ),
                (
                    "max_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts max."),
                ),
                (
                    "raw_damage",
                    models.PositiveSmallIntegerField(default=0, verbose_name="dégâts bruts"),
                ),
                (
                    "body_part",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("torso", "torse"),
                            ("legs", "jambes"),
                            ("arms", "bras"),
                            ("head", "tête"),
                            ("eyes", "yeux"),
                        ],
                        max_length=10,
                        verbose_name="partie du corps",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="nom")),
                (
                    "name_fr",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "name_en",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=200, verbose_name="titre"),
                ),
                (
                    "title_fr",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "title_en",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "description_en",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="items", verbose_name="image"),
                ),
                (
                    "thumbnail",
                    models.CharField(blank=True, choices=[], max_length=100, verbose_name="miniature"),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("weapon", "arme"),
                            ("ammo", "munition"),
                            ("armor", "armure"),
                            ("helmet", "casque"),
                            ("grenade", "grenade"),
                            ("extra", "accessoire"),
                            ("tool", "outil"),
                            ("food", "nourriture"),
                            ("chem", "drogue"),
                            ("book", "livre"),
                            ("misc", "autre"),
                        ],
                        max_length=10,
                        verbose_name="type",
                    ),
                ),
                (
                    "value",
                    models.PositiveIntegerField(default=0, verbose_name="valeur"),
                ),
                (
                    "durability",
                    models.PositiveIntegerField(default=0, verbose_name="durabilité"),
                ),
                (
                    "condition_modifier",
                    models.FloatField(default=0.0, verbose_name="modificateur de condition"),
                ),
                ("weight", models.FloatField(default=0.0, verbose_name="poids")),
                (
                    "is_quest",
                    models.BooleanField(default=False, verbose_name="quête ?"),
                ),
                (
                    "is_droppable",
                    models.BooleanField(default=True, verbose_name="jetable ?"),
                ),
                (
                    "hands",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "aucune"), (1, "une main"), (2, "deux mains")],
                        default=0,
                        verbose_name="mains nécessaires",
                    ),
                ),
                (
                    "attack_mode",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ranged", "attaque à distance"),
                            ("long", "attaque à longue distance"),
                            ("scoped", "attaque avec lunette"),
                            ("melee", "attaque en mêlée"),
                            ("throw", "attaque de lancer"),
                        ],
                        max_length=20,
                        verbose_name="mode d'attaque",
                    ),
                ),
                (
                    "skill",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("small_guns", "armes à feu légères"),
                            ("big_guns", "armes à feu lourdes"),
                            ("energy_weapons", "armes à énergie"),
                            ("unarmed", "à mains nues"),
                            ("melee_weapons", "armes de mêlée"),
                            ("throwing", "armes de lancer"),
                            ("athletics", "athlétisme"),
                            ("detection", "détection"),
                            ("first_aid", "premiers secours"),
                            ("doctor", "médecine"),
                            ("chems", "pharmacologie"),
                            ("sneak", "discrétion"),
                            ("lockpick", "crochetage"),
                            ("steal", "pickpocket"),
                            ("traps", "pièges"),
                            ("explosives", "explosifs"),
                            ("science", "science"),
                            ("repair", "mécanique"),
                            ("computers", "informatique"),
                            ("electronics", "électronique"),
                            ("speech", "persuasion"),
                            ("deception", "tromperie"),
                            ("barter", "marchandage"),
                            ("survival", "survie"),
                            ("knowledge", "connaissance"),
                        ],
                        max_length=20,
                        verbose_name="compétence",
                    ),
                ),
                (
                    "min_skill",
                    models.PositiveSmallIntegerField(default=0, verbose_name="compétence minimale"),
                ),
                (
                    "min_strength",
                    models.PositiveSmallIntegerField(default=0, verbose_name="force minimale"),
                ),
                (
                    "clip_size",
                    models.PositiveSmallIntegerField(default=0, verbose_name="taille du chargeur"),
                ),
                (
                    "burst_count",
                    models.PositiveSmallIntegerField(default=0, verbose_name="munitions en rafale"),
                ),
                (
                    "min_range",
                    models.PositiveSmallIntegerField(default=0, verbose_name="portée minimale"),
                ),
                (
                    "max_range",
                    models.PositiveSmallIntegerField(default=0, verbose_name="portée maximale"),
                ),
                (
                    "min_burst_range",
                    models.PositiveIntegerField(default=0, verbose_name="portée min. en rafale"),
                ),
                (
                    "max_burst_range",
                    models.PositiveIntegerField(default=0, verbose_name="portée max. en rafale"),
                ),
                (
                    "hit_chance_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur de précision"),
                ),
                (
                    "armor_class_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur classe d'armure"),
                ),
                (
                    "threshold_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur d'absorption"),
                ),
                (
                    "threshold_rate_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur taux d'absorption"),
                ),
                (
                    "resistance_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur de résistance"),
                ),
                (
                    "is_single_charge",
                    models.BooleanField(default=False, verbose_name="recharge unitaire ?"),
                ),
                (
                    "ap_cost_reload",
                    models.PositiveSmallIntegerField(default=0, verbose_name="coût PA recharge"),
                ),
                (
                    "ap_cost_normal",
                    models.PositiveSmallIntegerField(default=0, verbose_name="coût PA normal"),
                ),
                (
                    "ap_cost_target",
                    models.PositiveSmallIntegerField(default=0, verbose_name="coût PA ciblé"),
                ),
                (
                    "ap_cost_burst",
                    models.PositiveSmallIntegerField(default=0, verbose_name="coût PA rafale"),
                ),
                (
                    "damage_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur de dégâts"),
                ),
                (
                    "critical_modifier",
                    models.SmallIntegerField(default=0, verbose_name="chances de critiques"),
                ),
                (
                    "critical_raw_modifier",
                    models.SmallIntegerField(default=0, verbose_name="chances de dégâts bruts"),
                ),
                (
                    "critical_damage",
                    models.SmallIntegerField(default=0, verbose_name="dégâts critiques"),
                ),
                (
                    "critical_damage_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur dégâts critiques"),
                ),
                (
                    "armor_class",
                    models.SmallIntegerField(default=0, verbose_name="classe d'armure"),
                ),
                (
                    "ammunitions",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={"type": "ammo"},
                        related_name="weapons",
                        to="fallout.item",
                        verbose_name="types de munitions",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "effects",
                    models.ManyToManyField(
                        blank=True,
                        related_name="+",
                        to="fallout.effect",
                        verbose_name="effets",
                    ),
                ),
            ],
            options={
                "verbose_name": "objet",
                "verbose_name_plural": "objets",
            },
        ),
        migrations.CreateModel(
            name="LootTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="nom")),
                (
                    "name_fr",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "name_en",
                    models.CharField(max_length=200, null=True, verbose_name="nom"),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=200, verbose_name="titre"),
                ),
                (
                    "title_fr",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "title_en",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="titre"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "description_en",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="loots", verbose_name="image"),
                ),
                (
                    "thumbnail",
                    models.CharField(blank=True, choices=[], max_length=100, verbose_name="miniature"),
                ),
            ],
            options={
                "verbose_name": "modèle de butin",
                "verbose_name_plural": "modèles des butins",
            },
        ),
        migrations.CreateModel(
            name="Statistics",
            fields=[
                (
                    "damage_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption de dégâts"),
                ),
                (
                    "damage_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance aux dégâts"),
                ),
                (
                    "normal_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption normal"),
                ),
                (
                    "normal_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance normal"),
                ),
                (
                    "laser_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption laser"),
                ),
                (
                    "laser_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance laser"),
                ),
                (
                    "plasma_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption plasma"),
                ),
                (
                    "plasma_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance plasma"),
                ),
                (
                    "explosive_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption explosifs"),
                ),
                (
                    "explosive_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance explosifs"),
                ),
                (
                    "fire_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption feu"),
                ),
                (
                    "fire_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance feu"),
                ),
                (
                    "electricity_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption électricité"),
                ),
                (
                    "electricity_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance électricité"),
                ),
                (
                    "poison_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption poison"),
                ),
                (
                    "poison_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance poison"),
                ),
                (
                    "radiation_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption radiations"),
                ),
                (
                    "radiation_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance radiations"),
                ),
                (
                    "gas_contact_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption gaz (contact)"),
                ),
                (
                    "gas_contact_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance gaz (contact)"),
                ),
                (
                    "gas_inhaled_threshold",
                    models.SmallIntegerField(default=0, verbose_name="absorption gaz (inhalé)"),
                ),
                (
                    "gas_inhaled_resistance",
                    models.SmallIntegerField(default=0, verbose_name="résistance gaz (inhalé)"),
                ),
                (
                    "strength",
                    models.PositiveSmallIntegerField(default=5, verbose_name="force"),
                ),
                (
                    "perception",
                    models.PositiveSmallIntegerField(default=5, verbose_name="perception"),
                ),
                (
                    "endurance",
                    models.PositiveSmallIntegerField(default=5, verbose_name="endurance"),
                ),
                (
                    "charisma",
                    models.PositiveSmallIntegerField(default=5, verbose_name="charisme"),
                ),
                (
                    "intelligence",
                    models.PositiveSmallIntegerField(default=5, verbose_name="intelligence"),
                ),
                (
                    "agility",
                    models.PositiveSmallIntegerField(default=5, verbose_name="agilité"),
                ),
                (
                    "luck",
                    models.PositiveSmallIntegerField(default=5, verbose_name="chance"),
                ),
                (
                    "max_health",
                    models.PositiveSmallIntegerField(default=0, verbose_name="santé maximale"),
                ),
                (
                    "max_action_points",
                    models.PositiveSmallIntegerField(default=0, verbose_name="points d'action max."),
                ),
                (
                    "armor_class",
                    models.SmallIntegerField(default=0, verbose_name="classe d'armure"),
                ),
                (
                    "carry_weight",
                    models.SmallIntegerField(default=0, verbose_name="charge maximale"),
                ),
                (
                    "melee_damage",
                    models.SmallIntegerField(default=0, verbose_name="dégâts en mêlée"),
                ),
                (
                    "sequence",
                    models.SmallIntegerField(default=0, verbose_name="initiative"),
                ),
                (
                    "healing_rate",
                    models.SmallIntegerField(default=0, verbose_name="taux de regénération"),
                ),
                (
                    "ap_cost_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur d'action"),
                ),
                (
                    "one_hand_accuracy",
                    models.SmallIntegerField(default=0, verbose_name="précision à une main"),
                ),
                (
                    "two_hands_accuracy",
                    models.SmallIntegerField(default=0, verbose_name="précision à deux mains"),
                ),
                (
                    "damage_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur de dégâts"),
                ),
                (
                    "critical_chance",
                    models.SmallIntegerField(default=0, verbose_name="chances de critiques"),
                ),
                (
                    "critical_raw_chance",
                    models.SmallIntegerField(default=0, verbose_name="chances de dégâts bruts"),
                ),
                (
                    "critical_damage",
                    models.SmallIntegerField(default=0, verbose_name="modificateur dégâts critiques"),
                ),
                (
                    "small_guns",
                    models.SmallIntegerField(default=0, verbose_name="armes à feu légères"),
                ),
                (
                    "big_guns",
                    models.SmallIntegerField(default=0, verbose_name="armes à feu lourdes"),
                ),
                (
                    "energy_weapons",
                    models.SmallIntegerField(default=0, verbose_name="armes à énergie"),
                ),
                (
                    "unarmed",
                    models.SmallIntegerField(default=0, verbose_name="à mains nues"),
                ),
                (
                    "melee_weapons",
                    models.SmallIntegerField(default=0, verbose_name="armes de mêlée"),
                ),
                (
                    "throwing",
                    models.SmallIntegerField(default=0, verbose_name="armes de lancer"),
                ),
                (
                    "athletics",
                    models.SmallIntegerField(default=0, verbose_name="athlétisme"),
                ),
                (
                    "detection",
                    models.SmallIntegerField(default=0, verbose_name="détection"),
                ),
                (
                    "first_aid",
                    models.SmallIntegerField(default=0, verbose_name="premiers secours"),
                ),
                (
                    "doctor",
                    models.SmallIntegerField(default=0, verbose_name="médecine"),
                ),
                (
                    "chems",
                    models.SmallIntegerField(default=0, verbose_name="pharmacologie"),
                ),
                (
                    "sneak",
                    models.SmallIntegerField(default=0, verbose_name="discrétion"),
                ),
                (
                    "lockpick",
                    models.SmallIntegerField(default=0, verbose_name="crochetage"),
                ),
                (
                    "steal",
                    models.SmallIntegerField(default=0, verbose_name="pickpocket"),
                ),
                ("traps", models.SmallIntegerField(default=0, verbose_name="pièges")),
                (
                    "explosives",
                    models.SmallIntegerField(default=0, verbose_name="explosifs"),
                ),
                (
                    "science",
                    models.SmallIntegerField(default=0, verbose_name="science"),
                ),
                (
                    "repair",
                    models.SmallIntegerField(default=0, verbose_name="mécanique"),
                ),
                (
                    "computers",
                    models.SmallIntegerField(default=0, verbose_name="informatique"),
                ),
                (
                    "electronics",
                    models.SmallIntegerField(default=0, verbose_name="électronique"),
                ),
                (
                    "speech",
                    models.SmallIntegerField(default=0, verbose_name="persuasion"),
                ),
                (
                    "deception",
                    models.SmallIntegerField(default=0, verbose_name="tromperie"),
                ),
                (
                    "barter",
                    models.SmallIntegerField(default=0, verbose_name="marchandage"),
                ),
                (
                    "survival",
                    models.SmallIntegerField(default=0, verbose_name="survie"),
                ),
                (
                    "knowledge",
                    models.SmallIntegerField(default=0, verbose_name="connaissance"),
                ),
                (
                    "hit_points_per_level",
                    models.SmallIntegerField(default=0, verbose_name="santé par niveau"),
                ),
                (
                    "skill_points_per_level",
                    models.SmallIntegerField(default=0, verbose_name="compétences par niveau"),
                ),
                (
                    "perk_rate",
                    models.SmallIntegerField(default=0, verbose_name="niveaux pour un talent"),
                ),
                (
                    "character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="statistics",
                        serialize=False,
                        to="fallout.character",
                        verbose_name="personnage",
                    ),
                ),
                ("charge", models.FloatField(default=0.0, verbose_name="charge")),
                (
                    "modifiers",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                        verbose_name="modificateurs",
                    ),
                ),
                (
                    "obsolete",
                    models.BooleanField(default=False, editable=False, verbose_name="obsolète"),
                ),
                ("date", models.DateTimeField(auto_now=True, verbose_name="date")),
            ],
            options={
                "verbose_name": "statistiques",
                "verbose_name_plural": "statistiques",
            },
        ),
        migrations.CreateModel(
            name="RollHistory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True, verbose_name="date")),
                (
                    "game_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date en jeu"),
                ),
                ("level", models.SmallIntegerField(default=0, verbose_name="niveau")),
                (
                    "stats",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "S.P.E.C.I.A.L.",
                                (
                                    ("strength", "force"),
                                    ("perception", "perception"),
                                    ("endurance", "endurance"),
                                    ("charisma", "charisme"),
                                    ("intelligence", "intelligence"),
                                    ("agility", "agilité"),
                                    ("luck", "chance"),
                                ),
                            ),
                            (
                                "Compétences",
                                (
                                    ("small_guns", "armes à feu légères"),
                                    ("big_guns", "armes à feu lourdes"),
                                    ("energy_weapons", "armes à énergie"),
                                    ("unarmed", "à mains nues"),
                                    ("melee_weapons", "armes de mêlée"),
                                    ("throwing", "armes de lancer"),
                                    ("athletics", "athlétisme"),
                                    ("detection", "détection"),
                                    ("first_aid", "premiers secours"),
                                    ("doctor", "médecine"),
                                    ("chems", "pharmacologie"),
                                    ("sneak", "discrétion"),
                                    ("lockpick", "crochetage"),
                                    ("steal", "pickpocket"),
                                    ("traps", "pièges"),
                                    ("explosives", "explosifs"),
                                    ("science", "science"),
                                    ("repair", "mécanique"),
                                    ("computers", "informatique"),
                                    ("electronics", "électronique"),
                                    ("speech", "persuasion"),
                                    ("deception", "tromperie"),
                                    ("barter", "marchandage"),
                                    ("survival", "survie"),
                                    ("knowledge", "connaissance"),
                                ),
                            ),
                        ],
                        max_length=20,
                        verbose_name="statistique",
                    ),
                ),
                (
                    "value",
                    models.PositiveSmallIntegerField(default=0, verbose_name="valeur"),
                ),
                (
                    "modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur"),
                ),
                ("roll", models.PositiveIntegerField(default=0, verbose_name="jet")),
                (
                    "success",
                    models.BooleanField(default=False, verbose_name="succès ?"),
                ),
                (
                    "critical",
                    models.BooleanField(default=False, verbose_name="critique ?"),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roll_history",
                        to="fallout.character",
                        verbose_name="personnage",
                    ),
                ),
            ],
            options={
                "verbose_name": "historique de jet",
                "verbose_name_plural": "historiques des jets",
            },
        ),
        migrations.CreateModel(
            name="LootTemplateItem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chance",
                    models.PositiveSmallIntegerField(default=100, verbose_name="chance"),
                ),
                (
                    "min_quantity",
                    models.PositiveIntegerField(default=1, verbose_name="nombre min."),
                ),
                (
                    "max_quantity",
                    models.PositiveIntegerField(default=1, null=True, verbose_name="nombre max."),
                ),
                (
                    "min_condition",
                    models.PositiveSmallIntegerField(default=100, verbose_name="état min."),
                ),
                (
                    "max_condition",
                    models.PositiveSmallIntegerField(default=100, verbose_name="état max."),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.item",
                        verbose_name="objet",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="fallout.loottemplate",
                        verbose_name="modèle",
                    ),
                ),
            ],
            options={
                "verbose_name": "objet de butin",
                "verbose_name_plural": "objets des butins",
            },
        ),
        migrations.CreateModel(
            name="Loot",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(default=1, verbose_name="quantité"),
                ),
                (
                    "condition",
                    models.FloatField(blank=True, null=True, verbose_name="état"),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loots",
                        to="fallout.campaign",
                        verbose_name="campagne",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loots",
                        to="fallout.item",
                        verbose_name="objet",
                    ),
                ),
            ],
            options={
                "verbose_name": "butin",
                "verbose_name_plural": "butins",
            },
        ),
        migrations.CreateModel(
            name="Log",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True, verbose_name="date")),
                (
                    "game_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date en jeu"),
                ),
                ("text", models.TextField(blank=True, verbose_name="texte")),
                ("private", models.BooleanField(default=False, verbose_name="privé ?")),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.character",
                        verbose_name="personnage",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="joueur",
                    ),
                ),
            ],
            options={
                "verbose_name": "journal",
                "verbose_name_plural": "journaux",
            },
        ),
        migrations.CreateModel(
            name="ItemModifier",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stats",
                    models.CharField(
                        choices=[
                            (
                                "S.P.E.C.I.A.L.",
                                (
                                    ("strength", "force"),
                                    ("perception", "perception"),
                                    ("endurance", "endurance"),
                                    ("charisma", "charisme"),
                                    ("intelligence", "intelligence"),
                                    ("agility", "agilité"),
                                    ("luck", "chance"),
                                ),
                            ),
                            (
                                "Compétences",
                                (
                                    ("small_guns", "armes à feu légères"),
                                    ("big_guns", "armes à feu lourdes"),
                                    ("energy_weapons", "armes à énergie"),
                                    ("unarmed", "à mains nues"),
                                    ("melee_weapons", "armes de mêlée"),
                                    ("throwing", "armes de lancer"),
                                    ("athletics", "athlétisme"),
                                    ("detection", "détection"),
                                    ("first_aid", "premiers secours"),
                                    ("doctor", "médecine"),
                                    ("chems", "pharmacologie"),
                                    ("sneak", "discrétion"),
                                    ("lockpick", "crochetage"),
                                    ("steal", "pickpocket"),
                                    ("traps", "pièges"),
                                    ("explosives", "explosifs"),
                                    ("science", "science"),
                                    ("repair", "mécanique"),
                                    ("computers", "informatique"),
                                    ("electronics", "électronique"),
                                    ("speech", "persuasion"),
                                    ("deception", "tromperie"),
                                    ("barter", "marchandage"),
                                    ("survival", "survie"),
                                    ("knowledge", "connaissance"),
                                ),
                            ),
                            (
                                "Statistiques secondaires",
                                (
                                    ("max_health", "santé maximale"),
                                    ("max_action_points", "points d'action max."),
                                    ("carry_weight", "charge maximale"),
                                    ("armor_class", "classe d'armure"),
                                    ("melee_damage", "dégâts en mêlée"),
                                    ("sequence", "initiative"),
                                    ("healing_rate", "taux de regénération"),
                                    ("ap_cost_modifier", "modificateur d'action"),
                                    ("one_hand_accuracy", "précision à une main"),
                                    ("two_hands_accuracy", "précision à deux mains"),
                                    ("damage_modifier", "modificateur de dégâts"),
                                    ("critical_chance", "chance de critique"),
                                    ("critical_raw_chance", "chance de dégâts bruts"),
                                    (
                                        "critical_damage",
                                        "modificateur dégâts critiques",
                                    ),
                                ),
                            ),
                            (
                                "Statistiques de niveau",
                                (
                                    ("hit_points_per_level", "santé par niveau"),
                                    (
                                        "skill_points_per_level",
                                        "compétences par niveau",
                                    ),
                                    ("perk_rate", "niveaux pour un talent"),
                                ),
                            ),
                            (
                                "Résistances",
                                (
                                    ("damage_threshold", "absorption de dégâts"),
                                    ("damage_resistance", "résistance aux dégâts"),
                                    ("normal_threshold", "absorption physique"),
                                    ("normal_resistance", "résistance physique"),
                                    ("laser_threshold", "absorption des lasers"),
                                    ("laser_resistance", "résistance aux lasers"),
                                    ("plasma_threshold", "absorption du plasma"),
                                    ("plasma_resistance", "résistance au plasma"),
                                    (
                                        "explosive_threshold",
                                        "absorption des explosions",
                                    ),
                                    (
                                        "explosive_resistance",
                                        "résistance aux explosions",
                                    ),
                                    ("fire_threshold", "absorption du feu"),
                                    ("fire_resistance", "résistance au feu"),
                                    (
                                        "electricity_threshold",
                                        "absorption de l'électricité",
                                    ),
                                    (
                                        "electricity_resistance",
                                        "résistance à l'électricité",
                                    ),
                                    ("poison_threshold", "absorption des poisons"),
                                    ("poison_resistance", "résistance aux poisons"),
                                    (
                                        "radiation_threshold",
                                        "absorption des radiations",
                                    ),
                                    (
                                        "radiation_resistance",
                                        "résistance aux radiations",
                                    ),
                                    (
                                        "gas_contact_threshold",
                                        "absorption du gaz (contact)",
                                    ),
                                    (
                                        "gas_contact_resistance",
                                        "résistance au gaz (contact)",
                                    ),
                                    (
                                        "gas_inhaled_threshold",
                                        "absorption du gaz (inhalé)",
                                    ),
                                    (
                                        "gas_inhaled_resistance",
                                        "résistance au gaz (inhalé)",
                                    ),
                                ),
                            ),
                            (
                                "Etat général",
                                (
                                    ("health", "santé"),
                                    ("action_points", "points d'action"),
                                    ("thirst", "soif"),
                                    ("hunger", "faim"),
                                    ("sleep", "sommeil"),
                                    ("rads", "rads"),
                                    ("experience", "expérience"),
                                    ("skill_points", "points de compétence"),
                                    ("perk_points", "points de talent"),
                                    ("karma", "karma"),
                                    ("money", "argent"),
                                    ("reward", "récompense"),
                                ),
                            ),
                        ],
                        max_length=30,
                        verbose_name="statistique",
                    ),
                ),
                (
                    "raw_value",
                    models.SmallIntegerField(default=0, verbose_name="valeur brute"),
                ),
                (
                    "min_value",
                    models.SmallIntegerField(default=0, verbose_name="valeur min."),
                ),
                (
                    "max_value",
                    models.SmallIntegerField(default=0, verbose_name="valeur max."),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modifiers",
                        to="fallout.item",
                        verbose_name="objet",
                    ),
                ),
            ],
            options={
                "verbose_name": "modificateur d'objet",
                "verbose_name_plural": "modificateurs d'objets",
            },
        ),
        migrations.CreateModel(
            name="FightHistory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True, verbose_name="date")),
                (
                    "game_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date en jeu"),
                ),
                (
                    "attacker_level",
                    models.SmallIntegerField(default=0, verbose_name="niveau de l'attaquant"),
                ),
                (
                    "defender_level",
                    models.SmallIntegerField(default=0, verbose_name="niveau du défenseur"),
                ),
                (
                    "range",
                    models.PositiveSmallIntegerField(default=0, verbose_name="distance"),
                ),
                (
                    "body_part",
                    models.CharField(
                        choices=[
                            ("torso", "torse"),
                            ("legs", "jambes"),
                            ("arms", "bras"),
                            ("head", "tête"),
                            ("eyes", "yeux"),
                        ],
                        max_length=10,
                        verbose_name="partie du corps",
                    ),
                ),
                (
                    "burst",
                    models.BooleanField(default=False, verbose_name="tir en rafale ?"),
                ),
                (
                    "hit_count",
                    models.PositiveSmallIntegerField(default=0, verbose_name="compteur de coups"),
                ),
                (
                    "hit_modifier",
                    models.SmallIntegerField(default=0, verbose_name="modificateur de précision"),
                ),
                (
                    "hit_chance",
                    models.SmallIntegerField(default=0, verbose_name="précision"),
                ),
                (
                    "hit_roll",
                    models.PositiveSmallIntegerField(default=0, verbose_name="jet de précision"),
                ),
                (
                    "success",
                    models.BooleanField(default=False, verbose_name="touché ?"),
                ),
                (
                    "critical",
                    models.BooleanField(default=False, verbose_name="critique ?"),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("hit_succeed", "cible touchée"),
                            ("hit_failed", "cible manquée"),
                            ("not_enough_ap", "points d'action insuffisants"),
                            ("no_more_ammo", "munitions insuffisantes"),
                            ("target_dead", "cible inconsciente"),
                            ("target_killed", "cible tuée"),
                            ("weapon_broken", "arme défectueuse"),
                        ],
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "attacker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.character",
                        verbose_name="attaquant",
                    ),
                ),
                (
                    "attacker_ammo",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"type": "ammo"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.item",
                        verbose_name="munitions de l'attaquant",
                    ),
                ),
                (
                    "attacker_weapon",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"type__in": ("weapon", "grenade")},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.item",
                        verbose_name="arme de l'attaquant",
                    ),
                ),
                (
                    "damage",
                    models.OneToOneField(
                        blank=True,
                        limit_choices_to={"fight__isnull": False},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fight",
                        to="fallout.damagehistory",
                        verbose_name="historique des dégâts",
                    ),
                ),
                (
                    "defender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.character",
                        verbose_name="défenseur",
                    ),
                ),
                (
                    "defender_armor",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"type__in": ("armor", "helmet")},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.item",
                        verbose_name="protection du défenseur",
                    ),
                ),
            ],
            options={
                "verbose_name": "historique de combat",
                "verbose_name_plural": "historiques des combats",
            },
        ),
        migrations.CreateModel(
            name="Equipment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slot",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("weapon", "arme"),
                            ("ammo", "munition"),
                            ("armor", "armure"),
                            ("helmet", "casque"),
                            ("grenade", "grenade"),
                        ],
                        max_length=10,
                        verbose_name="emplacement",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(default=1, verbose_name="quantité"),
                ),
                (
                    "clip_count",
                    models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="munitions"),
                ),
                (
                    "condition",
                    models.FloatField(blank=True, null=True, verbose_name="état"),
                ),
                (
                    "secondary",
                    models.BooleanField(default=False, verbose_name="secondaire"),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="equipments",
                        to="fallout.character",
                        verbose_name="personnage",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.item",
                        verbose_name="objet",
                    ),
                ),
            ],
            options={
                "verbose_name": "équipement",
                "verbose_name_plural": "équipements",
            },
        ),
        migrations.CreateModel(
            name="EffectModifier",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stats",
                    models.CharField(
                        choices=[
                            (
                                "S.P.E.C.I.A.L.",
                                (
                                    ("strength", "force"),
                                    ("perception", "perception"),
                                    ("endurance", "endurance"),
                                    ("charisma", "charisme"),
                                    ("intelligence", "intelligence"),
                                    ("agility", "agilité"),
                                    ("luck", "chance"),
                                ),
                            ),
                            (
                                "Compétences",
                                (
                                    ("small_guns", "armes à feu légères"),
                                    ("big_guns", "armes à feu lourdes"),
                                    ("energy_weapons", "armes à énergie"),
                                    ("unarmed", "à mains nues"),
                                    ("melee_weapons", "armes de mêlée"),
                                    ("throwing", "armes de lancer"),
                                    ("athletics", "athlétisme"),
                                    ("detection", "détection"),
                                    ("first_aid", "premiers secours"),
                                    ("doctor", "médecine"),
                                    ("chems", "pharmacologie"),
                                    ("sneak", "discrétion"),
                                    ("lockpick", "crochetage"),
                                    ("steal", "pickpocket"),
                                    ("traps", "pièges"),
                                    ("explosives", "explosifs"),
                                    ("science", "science"),
                                    ("repair", "mécanique"),
                                    ("computers", "informatique"),
                                    ("electronics", "électronique"),
                                    ("speech", "persuasion"),
                                    ("deception", "tromperie"),
                                    ("barter", "marchandage"),
                                    ("survival", "survie"),
                                    ("knowledge", "connaissance"),
                                ),
                            ),
                            (
                                "Statistiques secondaires",
                                (
                                    ("max_health", "santé maximale"),
                                    ("max_action_points", "points d'action max."),
                                    ("carry_weight", "charge maximale"),
                                    ("armor_class", "classe d'armure"),
                                    ("melee_damage", "dégâts en mêlée"),
                                    ("sequence", "initiative"),
                                    ("healing_rate", "taux de regénération"),
                                    ("ap_cost_modifier", "modificateur d'action"),
                                    ("one_hand_accuracy", "précision à une main"),
                                    ("two_hands_accuracy", "précision à deux mains"),
                                    ("damage_modifier", "modificateur de dégâts"),
                                    ("critical_chance", "chance de critique"),
                                    ("critical_raw_chance", "chance de dégâts bruts"),
                                    (
                                        "critical_damage",
                                        "modificateur dégâts critiques",
                                    ),
                                ),
                            ),
                            (
                                "Statistiques de niveau",
                                (
                                    ("hit_points_per_level", "santé par niveau"),
                                    (
                                        "skill_points_per_level",
                                        "compétences par niveau",
                                    ),
                                    ("perk_rate", "niveaux pour un talent"),
                                ),
                            ),
                            (
                                "Résistances",
                                (
                                    ("damage_threshold", "absorption de dégâts"),
                                    ("damage_resistance", "résistance aux dégâts"),
                                    ("normal_threshold", "absorption physique"),
                                    ("normal_resistance", "résistance physique"),
                                    ("laser_threshold", "absorption des lasers"),
                                    ("laser_resistance", "résistance aux lasers"),
                                    ("plasma_threshold", "absorption du plasma"),
                                    ("plasma_resistance", "résistance au plasma"),
                                    (
                                        "explosive_threshold",
                                        "absorption des explosions",
                                    ),
                                    (
                                        "explosive_resistance",
                                        "résistance aux explosions",
                                    ),
                                    ("fire_threshold", "absorption du feu"),
                                    ("fire_resistance", "résistance au feu"),
                                    (
                                        "electricity_threshold",
                                        "absorption de l'électricité",
                                    ),
                                    (
                                        "electricity_resistance",
                                        "résistance à l'électricité",
                                    ),
                                    ("poison_threshold", "absorption des poisons"),
                                    ("poison_resistance", "résistance aux poisons"),
                                    (
                                        "radiation_threshold",
                                        "absorption des radiations",
                                    ),
                                    (
                                        "radiation_resistance",
                                        "résistance aux radiations",
                                    ),
                                    (
                                        "gas_contact_threshold",
                                        "absorption du gaz (contact)",
                                    ),
                                    (
                                        "gas_contact_resistance",
                                        "résistance au gaz (contact)",
                                    ),
                                    (
                                        "gas_inhaled_threshold",
                                        "absorption du gaz (inhalé)",
                                    ),
                                    (
                                        "gas_inhaled_resistance",
                                        "résistance au gaz (inhalé)",
                                    ),
                                ),
                            ),
                            (
                                "Etat général",
                                (
                                    ("health", "santé"),
                                    ("action_points", "points d'action"),
                                    ("thirst", "soif"),
                                    ("hunger", "faim"),
                                    ("sleep", "sommeil"),
                                    ("rads", "rads"),
                                    ("experience", "expérience"),
                                    ("skill_points", "points de compétence"),
                                    ("perk_points", "points de talent"),
                                    ("karma", "karma"),
                                    ("money", "argent"),
                                    ("reward", "récompense"),
                                ),
                            ),
                        ],
                        max_length=30,
                        verbose_name="statistique",
                    ),
                ),
                (
                    "raw_value",
                    models.SmallIntegerField(default=0, verbose_name="valeur brute"),
                ),
                (
                    "min_value",
                    models.SmallIntegerField(default=0, verbose_name="valeur min."),
                ),
                (
                    "max_value",
                    models.SmallIntegerField(default=0, verbose_name="valeur max."),
                ),
                (
                    "effect",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modifiers",
                        to="fallout.effect",
                        verbose_name="effet",
                    ),
                ),
            ],
            options={
                "verbose_name": "modificateur d'effet",
                "verbose_name_plural": "modificateurs d'effets",
            },
        ),
        migrations.AddField(
            model_name="damagehistory",
            name="armor",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"type__in": ("armor", "helmet")},
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="fallout.item",
                verbose_name="protection",
            ),
        ),
        migrations.AddField(
            model_name="damagehistory",
            name="character",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="damage_history",
                to="fallout.character",
                verbose_name="personnage",
            ),
        ),
        migrations.CreateModel(
            name="CharacterEffect",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date d'effet"),
                ),
                (
                    "end_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date d'arrêt"),
                ),
                (
                    "next_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date suivante"),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="active_effects",
                        to="fallout.character",
                        verbose_name="personnage",
                    ),
                ),
                (
                    "effect",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.effect",
                        verbose_name="effet",
                    ),
                ),
            ],
            options={
                "verbose_name": "effet de personnage",
                "verbose_name_plural": "effets de personnage",
            },
        ),
        migrations.CreateModel(
            name="CampaignEffect",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date d'effet"),
                ),
                (
                    "end_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date d'arrêt"),
                ),
                (
                    "next_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="date suivante"),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="active_effects",
                        to="fallout.campaign",
                        verbose_name="campagne",
                    ),
                ),
                (
                    "effect",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="fallout.effect",
                        verbose_name="effet",
                    ),
                ),
            ],
            options={
                "verbose_name": "effet de campagne",
                "verbose_name_plural": "effets de campagne",
            },
        ),
        migrations.AddField(
            model_name="campaign",
            name="current_character",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="fallout.character",
                verbose_name="personnage actif",
            ),
        ),
        migrations.AddField(
            model_name="campaign",
            name="game_master",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="maître du jeu",
            ),
        ),
    ]
